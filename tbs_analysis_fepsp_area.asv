%% analysis: fEPSP area
%==========================================================================
% notes
%==========================================================================

clear all
close all
clc

%% file paths and global variables
%==========================================================================
current_path = mfilename('fullpath');
if current_path(1)=='D'
    % desktop paths
    fpath_raw = 'D:\Google Drive\Work\Research Projects\Theta LTP\Raw Matlab Data\'; % raw
    fpath_processed = 'D:\Google Drive\Work\Research Projects\Theta LTP\Processed Matlab Data\'; % processed
    fpath_variables = 'D:\Google Drive\Work\Research Projects\Theta LTP\Matlab Variables\'; % variables
    fpath_analysis = 'D:\Google Drive\Work\Research Projects\Theta LTP\Analysis\';% analysis
    fpath_filters = 'D:\Google Drive\Work\Research Projects\Theta LTP\Filters\'; % filters
else
    % laptop
    fpath_raw = 'C:\Users\Greg Kronberg\Google Drive\Work\Research Projects\Theta LTP\Raw Matlab Data\'; % raw
    fpath_processed = 'C:\Users\Greg Kronberg\Google Drive\Work\Research Projects\Theta LTP\Processed Matlab Data\'; % processed
    fpath_variables = 'C:\Users\Greg Kronberg\Google Drive\Work\Research Projects\Theta LTP\Matlab Variables\'; % variables
    fpath_analysis = 'C:\Users\Greg Kronberg\Google Drive\Work\Research Projects\Theta LTP\Analysis\';% analysis
    fpath_filters = 'C:\Users\Greg Kronberg\Google Drive\Work\Research Projects\Theta LTP\Filters\'; % filters
    fpath_processed_images = 'C:\Users\Greg Kronberg\Google Drive\Work\Research Projects\Theta LTP\Processed Images\'; % processed
end

% load global structures
load(strcat(fpath_variables,'slices.mat')); % slices
load(strcat(fpath_variables,'slopes.mat')); % slopes
load(strcat(fpath_variables,'fepsp_area.mat')); % slopes
load(strcat(fpath_variables,'soma_maxslope.mat')); % slopes

%% exclusion criteria
%==========================================================================
date_cut = [ 0 20170426 0];%[20170115 20170301 20170401]; % cutoff dates for [apical basal perforant]
for a = 1:length(conditions{1})
    for b = 1:length(conditions{2})
        for c = 1:length(conditions{3})
            for d = 1:length(conditions{4})
                for e = 1:length(conditions{5})
                    if isempty(slices{a,b,c,d,e})==0
                        % apply inclusion/exclusion criteria
                        include{a,b,c,d,e} = [slices{a,b,c,d,e}(:).date]'>date_cut(d);
                        slices_temp{a,b,c,d,e} =  slices{a,b,c,d,e}(include{a,b,c,d,e});
                    end
                end
            end
        end
    end
end

% preallocate
%==========================================================================
tpre = 20;
tpost = 60;
t  = 1:tpre+tpost;
stim_color = {[0 0 0],[0 0 1],[1 0 0]};

%% store slopes for each condition in matrix
%==========================================================================
for a = 1:length(conditions{1})
    for b = 1:length(conditions{2})
        for c = 1:length(conditions{3})
            for d = 1:length(conditions{4})
                for e = 1:length(conditions{5})                    
%===================================== loop over experimental conditions
% check for slices
if isempty(slices{a,b,c,d,e})==0
    for f = 1:length(slices{a,b,c,d,e})
%====================================== loop over individual slices

% fepsp area
fepsp_area{a,b,c,d,e}(f).burst_area_norm = sum(fepsp_area{a,b,c,d,e}(f).fepsp_area_norm,1)';
fepsp_area{a,b,c,d,e}(f).burst_area_mean = mean(fepsp_area{a,b,c,d,e}(f).burst_area_norm);
fepsp_area{a,b,c,d,e}(f).burst_area_max = max(fepsp_area{a,b,c,d,e}(f).burst_area_norm);
fepsp_area{a,b,c,d,e}(f).burst_area_adapt = (fepsp_area{a,b,c,d,e}(f).burst_area_norm(end))...
    /(fepsp_area{a,b,c,d,e}(f).burst_area_norm(1));
fepsp_area{a,b,c,d,e}(f).reject = [slices{a,b,c,d,e}(f).date]'<date_cut(d);
%===================================== end loop over individual slices
    end
    reject = [fepsp_area{a,b,c,d,e}(:).reject]';
    keep{a,b,c,d,e}  = ~reject ;%
    keep_i{a,b,c,d,e} = find(keep{a,b,c,d,e});
end
%===================================== end loop over experimental conditions

                end
            end
        end
    end
end
save(strcat(fpath_variables,'fepsp_area.mat'),'fepsp_area')

%%
figure;hold on
plot(b*ones(length(fepsp_area{1,1,1,2,1}(keep_i{1,1,1,2,1})),1),[fepsp_area{1,1,1,2,1}(keep_i{1,1,1,2,1}).burst_area_mean],'.k')
plot(b*ones(length(fepsp_area{1,1,1,2,1}(keep_i{1,1,1,2,1})),1),[fepsp_area{1,1,1,2,1}(keep_i{1,1,1,2,1}).burst_area_mean],'.k')